/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cumimpactsa;

import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author ast
 */
public class MonteCarloRanksDialog extends javax.swing.JDialog {

    private boolean simulationReady=false;
    private MCSimulationManager mcm;
    /**
     * Creates new form MonteCarloRanksDialog
     */
    public MonteCarloRanksDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        if(GlobalResources.releaseVersion)
        {
            this.checkBoxAddRunsToResults.setVisible(false);
            this.checkBoxSpatialSummary.setVisible(false);
            this.checkBoxMapStressorContributions.setVisible(false);
      
        }
    }

    public void setSimulationManager(MCSimulationManager mcm)
    {
        this.mcm = mcm;
    }
    
    public boolean isSimulationReady()
    {
        return simulationReady;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        textFieldSimulationRuns = new javax.swing.JTextField();
        textFieldOutputFolder = new javax.swing.JTextField();
        buttonOutputFolder = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        checkBoxTransfNone = new javax.swing.JCheckBox();
        textFieldMissingStressorDataMin = new javax.swing.JTextField();
        textFieldMissingStressorDataMax = new javax.swing.JTextField();
        textFieldSensitivtyScoreErrorsMin = new javax.swing.JTextField();
        checkBoxSensitivtyScoreErrors = new javax.swing.JCheckBox();
        textFieldSensitivtyScoreErrorMax = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textFieldPointStressDecayMax = new javax.swing.JTextField();
        textFieldPointStressDecayMin = new javax.swing.JTextField();
        checkBoxPointStressDecay = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        checkBoxMissingStressorData = new javax.swing.JCheckBox();
        checkBoxTransfLog = new javax.swing.JCheckBox();
        checkBoxTransfPercentile = new javax.swing.JCheckBox();
        checkBoxTransfCut10 = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        checkBoxMultiAdditive = new javax.swing.JCheckBox();
        checkBoxMultiWorst = new javax.swing.JCheckBox();
        checkBoxMultiDiminish = new javax.swing.JCheckBox();
        textFieldThresholdsMax = new javax.swing.JTextField();
        textFieldThresholdsMin = new javax.swing.JTextField();
        checkBoxThresholds = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        checkBoxReducedAnalysisRes = new javax.swing.JCheckBox();
        textFieldThreads = new javax.swing.JTextField();
        textFieldReducedAnalysisResMax = new javax.swing.JTextField();
        checkBoxImprovedStressorRes = new javax.swing.JCheckBox();
        buttonCancel = new javax.swing.JButton();
        buttonRunSimulation = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        checkBoxImpactsAsSum = new javax.swing.JCheckBox();
        checkBoxImpactsAsMean = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        checkBoxSpatialSummary = new javax.swing.JCheckBox();
        checkBoxAddRunsToResults = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        textFieldReducedAnalysisResMin = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        buttonLoad = new javax.swing.JButton();
        checkBoxMapStressorContributions = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        textFieldFilterDistance = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Monte Carlo simulation runs");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, -1, 30));

        textFieldSimulationRuns.setText("1000");
        textFieldSimulationRuns.setName("runs"); // NOI18N
        textFieldSimulationRuns.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldSimulationRunsFocusLost(evt);
            }
        });
        getContentPane().add(textFieldSimulationRuns, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 22, 118, -1));

        textFieldOutputFolder.setEditable(false);
        textFieldOutputFolder.setText("not selected");
        textFieldOutputFolder.setName("folder"); // NOI18N
        getContentPane().add(textFieldOutputFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 22, 340, -1));

        buttonOutputFolder.setText("...");
        buttonOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOutputFolderActionPerformed(evt);
            }
        });
        getContentPane().add(buttonOutputFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 23, -1, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("Output folder");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("Model factors and range");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        checkBoxTransfNone.setText("Identity (no transformation)");
        checkBoxTransfNone.setToolTipText("<html>In each simulation run, one of the enabled transformation types is<br>\nselected with equal probability. This transformation is applied to all stressor<br>\ndata sets. At least one transformation type must be selected.</html>");
        checkBoxTransfNone.setName("cbidentity"); // NOI18N
        getContentPane().add(checkBoxTransfNone, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, -1, -1));

        textFieldMissingStressorDataMin.setText("0");
        textFieldMissingStressorDataMin.setToolTipText("<html>In each simulation run, a random proportion of stressor data sets <br>\ngiven by the min and max fields will be ommitted from the model. For example, <br>\nif min=0 and max=0.333, up to 33.3% (with the actual proportion randomly <br>\ndrawn from a uniform distribution) of all stressor data sets will be excluded <br>\nin any given simulation run. Which data sets are excluded is randomly chosen. <br> \nEach data set has the same probability of exclusion.</html>");
        textFieldMissingStressorDataMin.setName("missingmin"); // NOI18N
        textFieldMissingStressorDataMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldMissingStressorDataMinFocusLost(evt);
            }
        });
        getContentPane().add(textFieldMissingStressorDataMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 60, -1));

        textFieldMissingStressorDataMax.setText("0.333");
        textFieldMissingStressorDataMax.setToolTipText("<html>In each simulation run, a random proportion of stressor data sets <br>\ngiven by the min and max fields will be ommitted from the model. For example, <br>\nif min=0 and max=0.333, up to 33.3% (with the actual proportion randomly <br>\ndrawn from a uniform distribution) of all stressor data sets will be excluded <br>\nin any given simulation run. Which data sets are excluded is randomly chosen. <br> \nEach data set has the same probability of exclusion.</html>");
        textFieldMissingStressorDataMax.setName("missingmax"); // NOI18N
        textFieldMissingStressorDataMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldMissingStressorDataMaxFocusLost(evt);
            }
        });
        textFieldMissingStressorDataMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldMissingStressorDataMaxActionPerformed(evt);
            }
        });
        getContentPane().add(textFieldMissingStressorDataMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 60, 30));

        textFieldSensitivtyScoreErrorsMin.setText("0");
        textFieldSensitivtyScoreErrorsMin.setToolTipText("<html>In each simulation run, random errors will be added to the sensitivity weights. <br>\nIf m is the range of the sensitivity weights and r is a random number <br>\ndrawn from a uniform distribution U(min,max), the errors will be drawn from <br>\na uniform distribution U(-r*m,r*m). Weights that after adding the errors are outside <br>\nthe original range will be set to the original minimum or maximum, respectively.");
        textFieldSensitivtyScoreErrorsMin.setName("sensmin"); // NOI18N
        textFieldSensitivtyScoreErrorsMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldSensitivtyScoreErrorsMinFocusLost(evt);
            }
        });
        textFieldSensitivtyScoreErrorsMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldSensitivtyScoreErrorsMinActionPerformed(evt);
            }
        });
        getContentPane().add(textFieldSensitivtyScoreErrorsMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, 60, -1));

        checkBoxSensitivtyScoreErrors.setSelected(true);
        checkBoxSensitivtyScoreErrors.setText("Sensitivity weight errors");
        checkBoxSensitivtyScoreErrors.setToolTipText("<html>In each simulation run, random errors will be added to the sensitivity weights. <br>\nIf m is the range of the sensitivity weights and r is a random number <br>\ndrawn from a uniform distribution U(min,max), the errors will be drawn from <br>\na uniform distribution U(-r*m,r*m). Weights that after adding the errors are outside <br>\nthe original range will be set to the original minimum or maximum, respectively.\n");
        checkBoxSensitivtyScoreErrors.setName("cbsens"); // NOI18N
        getContentPane().add(checkBoxSensitivtyScoreErrors, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        textFieldSensitivtyScoreErrorMax.setText("0.5");
        textFieldSensitivtyScoreErrorMax.setToolTipText("<html>In each simulation run, random errors will be added to the sensitivity weights. <br>\nIf m is the range of the sensitivity weights and r is a random number <br>\ndrawn from a uniform distribution U(min,max), the errors will be drawn from <br>\na uniform distribution U(-r*m,r*m). Weights that after adding the errors are outside <br>\nthe original range will be set to the original minimum or maximum, respectively.");
        textFieldSensitivtyScoreErrorMax.setName("sensmax"); // NOI18N
        textFieldSensitivtyScoreErrorMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldSensitivtyScoreErrorMaxFocusLost(evt);
            }
        });
        textFieldSensitivtyScoreErrorMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldSensitivtyScoreErrorMaxActionPerformed(evt);
            }
        });
        getContentPane().add(textFieldSensitivtyScoreErrorMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 60, -1));

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Input data");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        textFieldPointStressDecayMax.setText("20000");
        textFieldPointStressDecayMax.setToolTipText("<html>This factor is only applied to data layers to which it was assigned in the \"Assign selective factors\" dialog. It is intended for stressor layers. <br>The intensity of these stressors will linearly decay in each simulation run\nover a randomly chosen distance netween min and max,<br> given in coordinate system\nunits. For example, in UTM, the units will typically be meters.<br>Point data sets must\nfirst be identified in the Processing & data/Data types menu.</html>\n");
        textFieldPointStressDecayMax.setName("decaymax"); // NOI18N
        textFieldPointStressDecayMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldPointStressDecayMaxFocusLost(evt);
            }
        });
        getContentPane().add(textFieldPointStressDecayMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 200, 60, -1));

        textFieldPointStressDecayMin.setText("0");
        textFieldPointStressDecayMin.setToolTipText("<html>This factor is only applied to data layers to which it was assigned in the \"Assign selective factors\" dialog. It is intended for stressor layers. <br>The intensity of these stressors will linearly decay in each simulation run\nover a randomly chosen distance netween min and max,<br> given in coordinate system\nunits. For example, in UTM, the units will typically be meters.<br>Point data sets must\nfirst be identified in the Processing & data/Data types menu.</html>\n");
        textFieldPointStressDecayMin.setName("decaymin"); // NOI18N
        textFieldPointStressDecayMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldPointStressDecayMinFocusLost(evt);
            }
        });
        getContentPane().add(textFieldPointStressDecayMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, 60, -1));

        checkBoxPointStressDecay.setSelected(true);
        checkBoxPointStressDecay.setText("Linear stress decay");
        checkBoxPointStressDecay.setToolTipText("<html>This factor is only applied to data layers to which it was assigned in the \"Assign selective factors\" dialog. It is intended for stressor layers. <br>The intensity of these stressors will linearly decay in each simulation run\nover a randomly chosen distance netween min and max,<br> given in coordinate system\nunits. For example, in UTM, the units will typically be meters.<br>Point data sets must\nfirst be identified in the Processing & data/Data types menu.</html>\n");
        checkBoxPointStressDecay.setName("cbdecay"); // NOI18N
        getContentPane().add(checkBoxPointStressDecay, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, -1));

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("Linear decay of stress intensity");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("Processing options");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 390, -1, -1));

        checkBoxMissingStressorData.setSelected(true);
        checkBoxMissingStressorData.setText("Missing stressor data");
        checkBoxMissingStressorData.setToolTipText("<html>In each simulation run, a random proportion of stressor data sets <br>\ngiven by the min and max fields will be ommitted from the model. For example, <br>\nif min=0 and max=0.333, up to 33.3% (with the actual proportion randomly <br>\ndrawn from a uniform distribution) of all stressor data sets will be excluded <br>\nin any given simulation run. Which data sets are excluded is randomly chosen. <br> \nEach data set has the same probability of exclusion.</html>");
        checkBoxMissingStressorData.setName("cbmissing"); // NOI18N
        getContentPane().add(checkBoxMissingStressorData, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        checkBoxTransfLog.setSelected(true);
        checkBoxTransfLog.setText("Log(X+1)");
        checkBoxTransfLog.setToolTipText("<html>In each simulation run, one of the enabled transformation types is<br>\nselected with equal probability. This transformation is applied to all stressor<br>\ndata sets. At least one transformation type must be selected.</html>");
        checkBoxTransfLog.setName("cblog"); // NOI18N
        checkBoxTransfLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxTransfLogActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxTransfLog, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, -1, -1));

        checkBoxTransfPercentile.setSelected(true);
        checkBoxTransfPercentile.setText("Percentile (CDF)");
        checkBoxTransfPercentile.setToolTipText("<html>In each simulation run, one of the enabled transformation types is<br>\nselected with equal probability. This transformation is applied to all stressor<br>\ndata sets. At least one transformation type must be selected.</html>");
        checkBoxTransfPercentile.setName("cbcdf"); // NOI18N
        getContentPane().add(checkBoxTransfPercentile, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 200, -1, -1));

        checkBoxTransfCut10.setSelected(true);
        checkBoxTransfCut10.setText("Cut highest 1%");
        checkBoxTransfCut10.setToolTipText("<html>In each simulation run, one of the enabled transformation types is<br>\nselected with equal probability. This transformation is applied to all stressor<br>\ndata sets. At least one transformation type must be selected.</html>");
        checkBoxTransfCut10.setName("cbcut"); // NOI18N
        getContentPane().add(checkBoxTransfCut10, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 170, -1, -1));

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel7.setText("Transformation types");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 90, -1, -1));

        checkBoxMultiAdditive.setSelected(true);
        checkBoxMultiAdditive.setText("Additive");
        checkBoxMultiAdditive.setToolTipText("<html>In each simulation run, one of the enabled multiple stressor effects models is<br>\nselected with equal probability. At least one multiple stressor effects model must be selected.</html>");
        checkBoxMultiAdditive.setName("cbadditive"); // NOI18N
        getContentPane().add(checkBoxMultiAdditive, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 280, -1, -1));

        checkBoxMultiWorst.setSelected(true);
        checkBoxMultiWorst.setText("Dominant stressor");
        checkBoxMultiWorst.setToolTipText("<html>In each simulation run, one of the enabled multiple stressor effects models is<br>\nselected with equal probability. At least one multiple stressor effects model must be selected.</html>");
        checkBoxMultiWorst.setName("cbdominant"); // NOI18N
        checkBoxMultiWorst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMultiWorstActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxMultiWorst, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 310, -1, -1));

        checkBoxMultiDiminish.setSelected(true);
        checkBoxMultiDiminish.setText("Antagonistic impacts");
        checkBoxMultiDiminish.setToolTipText("<html>In each simulation run, one of the enabled multiple stressor effects models is<br>\nselected with equal probability. At least one multiple stressor effects model must be selected.</html>");
        checkBoxMultiDiminish.setName("cbantagonistic"); // NOI18N
        getContentPane().add(checkBoxMultiDiminish, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 340, -1, -1));

        textFieldThresholdsMax.setText("1");
        textFieldThresholdsMax.setToolTipText("<html>In each simulation run, a proportion of ecosystem component-stressor combinations<br>\nwill be assigned an ecological threshold response function, as opposed to a linear<br>\nresponse function. The proportion (0 to 1) is randomly chosen from a uniform<br>\ndistribution U(min,max). Also the ecosystem component-stressor combinations that<br>\nget threshold instead of linear response functions are randomly chosen, with each<br>\ncombination having the same propbability to get a threshold response function.</html>");
        textFieldThresholdsMax.setName("threshmax"); // NOI18N
        textFieldThresholdsMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldThresholdsMaxFocusLost(evt);
            }
        });
        getContentPane().add(textFieldThresholdsMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, 60, -1));

        textFieldThresholdsMin.setText("0");
        textFieldThresholdsMin.setToolTipText("<html>In each simulation run, a proportion of ecosystem component-stressor combinations<br>\nwill be assigned an ecological threshold response function, as opposed to a linear<br>\nresponse function. The proportion (0 to 1) is randomly chosen from a uniform<br>\ndistribution U(min,max). Also the ecosystem component-stressor combinations that<br>\nget threshold instead of linear response functions are randomly chosen, with each<br>\ncombination having the same propbability to get a threshold response function.</html>");
        textFieldThresholdsMin.setName("threshmin"); // NOI18N
        textFieldThresholdsMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldThresholdsMinFocusLost(evt);
            }
        });
        getContentPane().add(textFieldThresholdsMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 270, 60, -1));

        checkBoxThresholds.setSelected(true);
        checkBoxThresholds.setText("Ecological thresholds");
        checkBoxThresholds.setToolTipText("<html>In each simulation run, a proportion of ecosystem component-stressor combinations<br>\nwill be assigned an ecological threshold response function, as opposed to a linear<br>\nresponse function. The proportion (0 to 1) is randomly chosen from a uniform<br>\ndistribution U(min,max). Also the ecosystem component-stressor combinations that<br>\nget threshold instead of linear response functions are randomly chosen, with each<br>\ncombination having the same propbability to get a threshold response function.</html>");
        checkBoxThresholds.setName("cbthresh"); // NOI18N
        getContentPane().add(checkBoxThresholds, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("Spatial resolution");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, -1, -1));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel9.setText("Non-linear effects");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        checkBoxReducedAnalysisRes.setSelected(true);
        checkBoxReducedAnalysisRes.setText("Reduced analysis res.");
        checkBoxReducedAnalysisRes.setToolTipText("<html>In each simulation run, the spatial resolution of the analysis will be reduced<br>\nby a randomly chosen integer factor between min and max. For example, if the original<br>\nspatial resolution is 1km, min=1 and max=2, the spatial resolution of the analysis<br>\nwill be 1km in about half of the simulation runs, and 2km in the remaining simulation runs.</html>");
        checkBoxReducedAnalysisRes.setName("cbredres"); // NOI18N
        getContentPane().add(checkBoxReducedAnalysisRes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, -1, -1));

        textFieldThreads.setText("1");
        textFieldThreads.setToolTipText("<html>Most modern computer processors have several cores, i.e. they can do several<br>\ncalculations at the same time. In this case, for large data sets and many simulation runs, \nyou can speed up processing by increasing the number of threads up to your number of cores.</html>");
        textFieldThreads.setName("nrthreads"); // NOI18N
        getContentPane().add(textFieldThreads, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 420, 30, 20));

        textFieldReducedAnalysisResMax.setText("2");
        textFieldReducedAnalysisResMax.setToolTipText("<html>In each simulation run, the spatial resolution of the analysis will be reduced<br>\nby a randomly chosen integer factor between min and max. For example, if the original<br>\nspatial resolution is 1km, min=1 and max=2, the spatial resolution of the analysis<br>\nwill be 1km in about half of the simulation runs, and 2km in the remaining simulation runs.</html>");
        textFieldReducedAnalysisResMax.setName("redresmax"); // NOI18N
        textFieldReducedAnalysisResMax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldReducedAnalysisResMaxFocusLost(evt);
            }
        });
        getContentPane().add(textFieldReducedAnalysisResMax, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 340, 60, -1));

        checkBoxImprovedStressorRes.setSelected(true);
        checkBoxImprovedStressorRes.setText("Improved stressor res.");
        checkBoxImprovedStressorRes.setToolTipText("<html>This factor only affects data layers to which it has been assigned in the \"Assign selective factors\" dialog.<br> In each simulation run,  large, uniform areas<br>\nwill be replaced with fine-resolution versions that retain the general patterns. This involves low-pass filtering, the distance for which has to be given below.<br> Typically, about 5 times the spatial resolution is a good choice.\n</html>");
        checkBoxImprovedStressorRes.setName("cbimpres"); // NOI18N
        getContentPane().add(checkBoxImprovedStressorRes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, -1, -1));

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });
        getContentPane().add(buttonCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 520, 100, 30));

        buttonRunSimulation.setText("Run simulation");
        buttonRunSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunSimulationActionPerformed(evt);
            }
        });
        getContentPane().add(buttonRunSimulation, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 520, 160, 30));

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel10.setText("Impacts on ecosystem components");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, -1, -1));

        checkBoxImpactsAsSum.setSelected(true);
        checkBoxImpactsAsSum.setText("Sum");
        checkBoxImpactsAsSum.setToolTipText("<html>Impacts in cells with more than one ecosystem component will be summed or averaged<br>\nin each simulation run. At least one option must be selected. If both are selected, a coin is flipped<br>\nto choose one in each simulation run.</html>");
        checkBoxImpactsAsSum.setName("cbsum"); // NOI18N
        getContentPane().add(checkBoxImpactsAsSum, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, -1, -1));

        checkBoxImpactsAsMean.setSelected(true);
        checkBoxImpactsAsMean.setText("Mean");
        checkBoxImpactsAsMean.setToolTipText("<html>Impacts in cells with more than one ecosystem component will be summed or averaged<br>\nin each simulation run. At least one option must be selected. If both are selected, a coin is flipped<br>\nto choose one in each simulation run.</html>");
        checkBoxImpactsAsMean.setName("cbmean"); // NOI18N
        checkBoxImpactsAsMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxImpactsAsMeanActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxImpactsAsMean, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, -1, -1));

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel11.setText("Multiple effects models");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 250, -1, -1));

        checkBoxSpatialSummary.setSelected(true);
        checkBoxSpatialSummary.setText("** Spatial summary (slower processing)");
        checkBoxSpatialSummary.setToolTipText("<html>If this option is disabled, the simulation results will be ranks of regions,<br>\nstressors and ecosystem components. If it is enabled, the results will in addition include<br>\nper-cell spatial data like the proportion of simulation runs in which the cell was among the<br>\nmost impacted 10%.</html>\n");
        checkBoxSpatialSummary.setName("cbspatialsummary"); // NOI18N
        checkBoxSpatialSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSpatialSummaryActionPerformed(evt);
            }
        });
        getContentPane().add(checkBoxSpatialSummary, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 480, -1, -1));

        checkBoxAddRunsToResults.setText("** Show simulation runs in project results");
        checkBoxAddRunsToResults.setToolTipText("<html>If this option is selected, the human impact map from each simulation run<br>\nis added to the project results. This option should be disabled if the number of simulation/br>\nruns is large.</html>");
        checkBoxAddRunsToResults.setName("cbshowruns"); // NOI18N
        getContentPane().add(checkBoxAddRunsToResults, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 460, -1, -1));

        jLabel12.setText("Max");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, -1, -1));

        jLabel13.setText("Min");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, -1, -1));

        textFieldReducedAnalysisResMin.setText("1");
        textFieldReducedAnalysisResMin.setToolTipText("<html>In each simulation run, the spatial resolution of the analysis will be reduced<br>\nby a randomly chosen integer factor between min and max. For example, if the original<br>\nspatial resolution is 1km, min=1 and max=2, the spatial resolution of the analysis<br>\nwill be 1km in about half of the simulation runs, and 2km in the remaining simulation runs.</html>");
        textFieldReducedAnalysisResMin.setName("redresmin"); // NOI18N
        textFieldReducedAnalysisResMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldReducedAnalysisResMinFocusLost(evt);
            }
        });
        getContentPane().add(textFieldReducedAnalysisResMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 340, 60, -1));

        jLabel14.setText("Number of threads:");
        jLabel14.setToolTipText("<html>Most modern computer processors have several cores, i.e. they can do several<br>\ncalculations at the same time. In this case, for large data sets and many simulation runs,<br>\nyou can speed up processing by increasing the number of threads up to your number of cores.<br>\nUsing several threads increases memory requirements, though.\n</html>");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 420, -1, -1));

        buttonSave.setText("Save settings...");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });
        getContentPane().add(buttonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 520, 150, 30));

        buttonLoad.setText("Load settings...");
        buttonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadActionPerformed(evt);
            }
        });
        getContentPane().add(buttonLoad, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 520, 140, 30));

        checkBoxMapStressorContributions.setText("** Map stressor contributions");
        checkBoxMapStressorContributions.setToolTipText("<html>If this option is selected, the stressor's contribution to impact scores isd mapped as mean over all simulation runs in which it occurs.");
        checkBoxMapStressorContributions.setName("cbmapcontrib"); // NOI18N
        getContentPane().add(checkBoxMapStressorContributions, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 440, -1, -1));

        jLabel15.setText("Filter distance:");
        jLabel15.setToolTipText("<html>This factor only affects data layers to which it has been assigned in the \"Assign selective factors\" dialog.<br> In each simulation run,  large, uniform areas<br>\nwill be replaced with fine-resolution versions that retain the general patterns. This involves low-pass filtering, the distance for which has to be given below.<br> Typically, about 5 times the spatial resolution is a good choice.\n</html>");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 420, -1, -1));

        textFieldFilterDistance.setText("25000");
        textFieldFilterDistance.setToolTipText("<html>This factor only affects data layers to which it has been assigned in the \"Assign selective factors\" dialog.<br> In each simulation run,  large, uniform areas<br>\nwill be replaced with fine-resolution versions that retain the general patterns. This involves low-pass filtering, the distance for which has to be given below.<br> Typically, about 5 times the spatial resolution is a good choice.\n</html>");
        textFieldFilterDistance.setName("filterdist"); // NOI18N
        textFieldFilterDistance.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldFilterDistanceFocusLost(evt);
            }
        });
        getContentPane().add(textFieldFilterDistance, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 410, 100, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOutputFolderActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setCurrentDirectory(new File(GlobalResources.lastUsedFolder));
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            this.textFieldOutputFolder.setText(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_buttonOutputFolderActionPerformed

    private void textFieldSensitivtyScoreErrorMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldSensitivtyScoreErrorMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldSensitivtyScoreErrorMaxActionPerformed

    private void textFieldSensitivtyScoreErrorsMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldSensitivtyScoreErrorsMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldSensitivtyScoreErrorsMinActionPerformed

    private void checkBoxTransfLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxTransfLogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxTransfLogActionPerformed

    private void checkBoxMultiWorstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMultiWorstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxMultiWorstActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_buttonCancelActionPerformed

    private void buttonRunSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunSimulationActionPerformed
       
        this.simulationReady=false;
        String error="";
        
        try{mcm.simulationRuns=Integer.parseInt(this.textFieldSimulationRuns.getText());} catch(Exception e)  {error="Simulation runs must be given as integer.";}
        
        mcm.outputFolder=this.textFieldOutputFolder.getText();
        File outputFolder=null;
        try {outputFolder=new File(this.textFieldOutputFolder.getText());} catch(Exception e) {error="Please select a valid output folder.";}
        if(outputFolder==null || !outputFolder.isDirectory()) {error="Please select a valid output folder.";}
        
        try
        {
            mcm.missingStressorData=this.checkBoxMissingStressorData.isSelected();
            mcm.missingStressorDataMin=Double.parseDouble(this.textFieldMissingStressorDataMin.getText());
            mcm.missingStressorDataMax=Double.parseDouble(this.textFieldMissingStressorDataMax.getText());
        }
        catch(Exception e) {error="Missing stressor data range must be numeric.";}
        
       
       try
        {
            mcm.sensitivityScoreErrors=this.checkBoxSensitivtyScoreErrors.isSelected();
            mcm.sensitivityScoreErrorsMin=Double.parseDouble(this.textFieldSensitivtyScoreErrorsMin.getText());
            mcm.sensitivityScoreErrorsMax=Double.parseDouble(this.textFieldSensitivtyScoreErrorMax.getText());
        }
        catch(Exception e) {error="Sensitivty score error range must be numeric.";}
       
       try
        {
            mcm.stressLinearDecay=this.checkBoxPointStressDecay.isSelected();
            mcm.linearDecayMin=Double.parseDouble(this.textFieldPointStressDecayMin.getText());
            mcm.linearDecayMax=Double.parseDouble(this.textFieldPointStressDecayMax.getText());
        }
        catch(Exception e) {error="Point data stress decay range ,ust be numeric.";}
       
       try
        {
            mcm.ecologicalThresholds=this.checkBoxThresholds.isSelected();
            mcm.ecologicalThresholdMin=Double.parseDouble(this.textFieldThresholdsMin.getText());
            mcm.ecologicalThresholdMax=Double.parseDouble(this.textFieldThresholdsMax.getText());
        }
        catch(Exception e) {error="Ecological thresholds range must be numeric.";}
       
       try
        {
            mcm.reducedAnalysisRes=this.checkBoxReducedAnalysisRes.isSelected();
            mcm.reducedAnalysisResMin=Double.parseDouble(this.textFieldThreads.getText());
            mcm.reducedAnalysisResMax=Double.parseDouble(this.textFieldReducedAnalysisResMax.getText());
        }
        catch(Exception e) {error="Reduced analysis resolution range must be numeric.";}
       
       try
        {
            mcm.reducedAnalysisRes=this.checkBoxReducedAnalysisRes.isSelected();
            mcm.reducedAnalysisResMin=Double.parseDouble(this.textFieldReducedAnalysisResMin.getText());
            mcm.reducedAnalysisResMax=Double.parseDouble(this.textFieldReducedAnalysisResMax.getText());
        }
        catch(Exception e) {error="Reduced analysis resolution range must be numeric.";}
       
       try{mcm.threads=Integer.parseInt(this.textFieldThreads.getText());} catch(Exception e)  {error="Number of threads must be given as integer.";}

       mcm.improvedStressorRes=this.checkBoxImprovedStressorRes.isSelected();
       
       mcm.impactsAsSum = this.checkBoxImpactsAsSum.isSelected();
       mcm.impactsAsMean = this.checkBoxImpactsAsMean.isSelected();
       
       mcm.transformationNone=this.checkBoxTransfNone.isSelected();
       mcm.transformationLog=this.checkBoxTransfLog.isSelected();
       mcm.transformationCut5=this.checkBoxTransfCut10.isSelected();
       mcm.transformationPercentile=this.checkBoxTransfPercentile.isSelected();
       
       mcm.multipleEffectsAdditive=this.checkBoxMultiAdditive.isSelected();
       mcm.multipleEffectsDominant=this.checkBoxMultiWorst.isSelected();
       mcm.multipleEffectsDiminishing=this.checkBoxMultiDiminish.isSelected();
       
       mcm.createSpatialOutputs = this.checkBoxSpatialSummary.isSelected();
       mcm.mapStressorContributions=this.checkBoxMapStressorContributions.isSelected();
       mcm.addRunsToResults = this.checkBoxAddRunsToResults.isSelected();
       
       if(!this.checkBoxImpactsAsSum.isSelected() && !this.checkBoxImpactsAsMean.isSelected())
       {error="At least one impact model for multiple ecological components in a cell must be selected.";}
       
       if(!this.checkBoxMultiAdditive.isSelected() && !this.checkBoxMultiDiminish.isSelected() && !this.checkBoxMultiWorst.isSelected())
       {error = "At least one multiple effects model must be selected.";}
       
       if(!this.checkBoxTransfCut10.isSelected() && !this.checkBoxTransfLog.isSelected() && !this.checkBoxTransfNone.isSelected() && !this.checkBoxTransfPercentile.isSelected())
       { error= "At least one stressor data transformation must be selected.";}
       
       if(error.equals(""))
       {
           this.simulationReady=true;
           File settingsFile = new File(mcm.outputFolder,"simulationsettings.csv");
           CsvTableGeneral table = createSettingsTable();
           table.writeToFile(settingsFile.getAbsolutePath()); 
           this.setVisible(false);
       }
       else
       {
           JOptionPane.showMessageDialog(this, error);
       }
    }//GEN-LAST:event_buttonRunSimulationActionPerformed

    private void checkBoxImpactsAsMeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxImpactsAsMeanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBoxImpactsAsMeanActionPerformed

    private void textFieldMissingStressorDataMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldMissingStressorDataMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldMissingStressorDataMaxActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setCurrentDirectory(new File(GlobalResources.lastUsedFolder));
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            CsvTableGeneral table = createSettingsTable();
            table.writeToFile(selectedFile.getAbsolutePath());     
            
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    protected void save(String filename)
    {
        CsvTableGeneral table = createSettingsTable();
        table.writeToFile(filename);    
    }
    
    private void buttonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setCurrentDirectory(new File(GlobalResources.lastUsedFolder));
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION)
        {
            File selectedFile = fileChooser.getSelectedFile();
            loadFromFile(selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_buttonLoadActionPerformed

    protected void loadFromFile(String filename)
    {
            CsvTableGeneral table = new CsvTableGeneral();
            try
            {
                table.readFromFile(new File(filename));
                ArrayList<String> componentNames = table.getColumn(table.getColNames().get(0));
                ArrayList<String> componentValues = table.getColumn(table.getColNames().get(1));
                
                for(int i=0; i<componentNames.size();i++)
                {
                   Component com = getComponentByName(componentNames.get(i));
                   if(com instanceof JTextField) 
                   {
                        JTextField field = (JTextField) com;
                        field.setText(componentValues.get(i));
                   }
            
                   else if(com instanceof JCheckBox) 
                    {
                        JCheckBox box = (JCheckBox) com;
                        box.setSelected(Boolean.parseBoolean(componentValues.get(i)));
                    }
                }
                
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Could not read Monte Carlo settings from file: "+filename);
            }
    }
    
    private void checkBoxSpatialSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSpatialSummaryActionPerformed
       
    }//GEN-LAST:event_checkBoxSpatialSummaryActionPerformed

    private void textFieldThresholdsMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldThresholdsMinFocusLost
        try
        {
            float nr=Float.parseFloat(textFieldThresholdsMin.getText());
            if(nr<0 || nr>1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number between 0 and 1.");
            textFieldThresholdsMin.setText("0");
        }
    }//GEN-LAST:event_textFieldThresholdsMinFocusLost

    private void textFieldFilterDistanceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldFilterDistanceFocusLost
         try
        {
            float filterDistance=Float.parseFloat(textFieldFilterDistance.getText());
            GlobalResources.lowPassFilterDistance=filterDistance;
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Low pass filter distance must be a number greater than 0.");
            textFieldFilterDistance.setText(GlobalResources.lowPassFilterDistance+"");
        }
    }//GEN-LAST:event_textFieldFilterDistanceFocusLost

    private void textFieldSimulationRunsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldSimulationRunsFocusLost
         try
        {
            int runs=Integer.parseInt(textFieldSimulationRuns.getText());
            if(runs<0) {throw new Exception();}
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Simulation runs must be an integer greater than 0.");
            textFieldSimulationRuns.setText("1000");
        }
    }//GEN-LAST:event_textFieldSimulationRunsFocusLost

    private void textFieldMissingStressorDataMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldMissingStressorDataMinFocusLost
        try
        {
            float min=Float.parseFloat(textFieldMissingStressorDataMin.getText());
            if(min<0 || min>1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number between 0 and 1.");
            textFieldMissingStressorDataMin.setText("0");
        }
    }//GEN-LAST:event_textFieldMissingStressorDataMinFocusLost

    private void textFieldMissingStressorDataMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldMissingStressorDataMaxFocusLost
        try
        {
            float nr=Float.parseFloat(textFieldMissingStressorDataMax.getText());
            if(nr<0 || nr>1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number between 0 and 1.");
            textFieldMissingStressorDataMax.setText("0.333");
        }
    }//GEN-LAST:event_textFieldMissingStressorDataMaxFocusLost

    private void textFieldSensitivtyScoreErrorsMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldSensitivtyScoreErrorsMinFocusLost
        try
        {
            float nr=Float.parseFloat(textFieldSensitivtyScoreErrorsMin.getText());
            if(nr<0 || nr>1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number between 0 and 1.");
            textFieldSensitivtyScoreErrorsMin.setText("0");
        }
    }//GEN-LAST:event_textFieldSensitivtyScoreErrorsMinFocusLost

    private void textFieldSensitivtyScoreErrorMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldSensitivtyScoreErrorMaxFocusLost
        try
        {
            float nr=Float.parseFloat(textFieldSensitivtyScoreErrorMax.getText());
            if(nr<0 || nr>1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number between 0 and 1.");
            textFieldSensitivtyScoreErrorMax.setText("1");
        }
    }//GEN-LAST:event_textFieldSensitivtyScoreErrorMaxFocusLost

    private void textFieldPointStressDecayMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldPointStressDecayMinFocusLost
        try
        {
            float nr=Float.parseFloat(textFieldPointStressDecayMin.getText());
            if(nr<0) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number larger than or equal to 0.");
            textFieldPointStressDecayMin.setText("0");
        }
    }//GEN-LAST:event_textFieldPointStressDecayMinFocusLost

    private void textFieldPointStressDecayMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldPointStressDecayMaxFocusLost
        try
        {
            float nr=Float.parseFloat(textFieldPointStressDecayMax.getText());
            if(nr<0) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number larger than or equal to 0.");
            textFieldPointStressDecayMax.setText("20000");
        }
    }//GEN-LAST:event_textFieldPointStressDecayMaxFocusLost

    private void textFieldThresholdsMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldThresholdsMaxFocusLost
        try
        {
            float nr=Float.parseFloat(textFieldThresholdsMax.getText());
            if(nr<0 || nr>1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter a number between 0 and 1.");
            textFieldThresholdsMax.setText("1");
        }
    }//GEN-LAST:event_textFieldThresholdsMaxFocusLost

    private void textFieldReducedAnalysisResMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldReducedAnalysisResMinFocusLost
        try
        {
            int nr=Integer.parseInt(textFieldReducedAnalysisResMin.getText());
            if(nr<1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter an integer greater than 0.");
            textFieldReducedAnalysisResMin.setText("1");
        }
    }//GEN-LAST:event_textFieldReducedAnalysisResMinFocusLost

    private void textFieldReducedAnalysisResMaxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldReducedAnalysisResMaxFocusLost
        try
        {
            int nr=Integer.parseInt(textFieldReducedAnalysisResMax.getText());
            if(nr<1) throw new Exception(); 
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please enter an integer greater than 0.");
            textFieldReducedAnalysisResMax.setText("2");
        }
    }//GEN-LAST:event_textFieldReducedAnalysisResMaxFocusLost

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        this.textFieldThreads.setText(GlobalResources.nrOfThreads+"");
        this.textFieldFilterDistance.setText(GlobalResources.lowPassFilterDistance+"");
    }//GEN-LAST:event_formComponentShown

    private Component getComponentByName(String name)
    {
        Component found=null;
        Component[] components = getContentPane().getComponents();
        for(Component com : components) 
        {
            if(com instanceof JCheckBox || com instanceof JTextField)
            {
                if(com.getName().equals(name))
                {
                    found = com;
                }
            }
        }
        return found;
    }
    
    private void addToTable(String control, String setting, CsvTableGeneral table)
    {
        ArrayList row = new ArrayList();
        row.add(control);
        row.add(setting); 
        table.addRow(row);
    }
    
    private CsvTableGeneral createSettingsTable()
    {
        
        CsvTableGeneral table = new CsvTableGeneral();
        table.addColumn("Component");
        table.addColumn("Setting");

        Component[] components = getContentPane().getComponents();
        for(Component com : components) 
        {
            if(com instanceof JTextField) 
            {
                JTextField field = (JTextField) com;
                addToTable(field.getName(),field.getText(),table);
            } 
            else if(com instanceof JCheckBox) 
            {
                JCheckBox box = (JCheckBox) com;
                addToTable(box.getName(),box.isSelected()+"",table);
            }
        }
        
        return table;
        
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonteCarloRanksDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MonteCarloRanksDialog dialog = new MonteCarloRanksDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonLoad;
    private javax.swing.JButton buttonOutputFolder;
    private javax.swing.JButton buttonRunSimulation;
    private javax.swing.JButton buttonSave;
    private javax.swing.JCheckBox checkBoxAddRunsToResults;
    private javax.swing.JCheckBox checkBoxImpactsAsMean;
    private javax.swing.JCheckBox checkBoxImpactsAsSum;
    private javax.swing.JCheckBox checkBoxImprovedStressorRes;
    private javax.swing.JCheckBox checkBoxMapStressorContributions;
    private javax.swing.JCheckBox checkBoxMissingStressorData;
    private javax.swing.JCheckBox checkBoxMultiAdditive;
    private javax.swing.JCheckBox checkBoxMultiDiminish;
    private javax.swing.JCheckBox checkBoxMultiWorst;
    private javax.swing.JCheckBox checkBoxPointStressDecay;
    private javax.swing.JCheckBox checkBoxReducedAnalysisRes;
    private javax.swing.JCheckBox checkBoxSensitivtyScoreErrors;
    private javax.swing.JCheckBox checkBoxSpatialSummary;
    private javax.swing.JCheckBox checkBoxThresholds;
    private javax.swing.JCheckBox checkBoxTransfCut10;
    private javax.swing.JCheckBox checkBoxTransfLog;
    private javax.swing.JCheckBox checkBoxTransfNone;
    private javax.swing.JCheckBox checkBoxTransfPercentile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField textFieldFilterDistance;
    private javax.swing.JTextField textFieldMissingStressorDataMax;
    private javax.swing.JTextField textFieldMissingStressorDataMin;
    private javax.swing.JTextField textFieldOutputFolder;
    private javax.swing.JTextField textFieldPointStressDecayMax;
    private javax.swing.JTextField textFieldPointStressDecayMin;
    private javax.swing.JTextField textFieldReducedAnalysisResMax;
    private javax.swing.JTextField textFieldReducedAnalysisResMin;
    private javax.swing.JTextField textFieldSensitivtyScoreErrorMax;
    private javax.swing.JTextField textFieldSensitivtyScoreErrorsMin;
    private javax.swing.JTextField textFieldSimulationRuns;
    private javax.swing.JTextField textFieldThreads;
    private javax.swing.JTextField textFieldThresholdsMax;
    private javax.swing.JTextField textFieldThresholdsMin;
    // End of variables declaration//GEN-END:variables
}
